**************Packages***************
==========================================================

create or replace package emp_pack as
	procedure getEmpInfo(p_empno emp.empno%type);
	function getSal(p_empno emp.empno%type) return number;
end;
/
create or replace package body emp_pack as

	procedure getEmpInfo(p_empno emp.empno%type) as
	          v_name emp.ename%type;
	begin
	          select ename into v_name from emp where empno=p_empno;
	          dbms_output.put_line('Proc ename= '||v_name);
	exception
	          when no_data_found then
	          dbms_output.put_line('Invalid emp no');
	end;

	function getSal(p_empno emp.empno%type) return number as
	          v_sal emp.sal%type;
	begin
	          select sal into v_sal from emp where empno=p_empno;
	          dbms_output.put_line('Proc salary= '||v_sal);
	          return v_sal;
	exception
	          when no_data_found then
	          dbms_output.put_line('Invalid emp no');
	end;

end;
/

execute emp_pack.getEmpInfo(7788);

declare
v_forsal emp.sal%type;
begin
v_forsal:=emp_pack.getSal(7788);
dbms_output.put_line('7788 salary= '||v_forsal);
end;
/

***************************************************************************

create or replace package emp_pack as
	procedure getEmpInfo(p_empno emp.empno%type);
	function getSal(p_empno emp.empno%type) return number;
end;
/
create or replace package body emp_pack as

	procedure pri_proc as
	begin
	          dbms_output.put_line('in private proc pri_proc');
	end;

	procedure getEmpInfo(p_empno emp.empno%type) as
	          v_name emp.ename%type;
	begin
	          select ename into v_name from emp where empno=p_empno;
	          dbms_output.put_line('Proc ename= '||v_name);
	exception
	          when no_data_found then
	          dbms_output.put_line('Invalid emp no');
	end;

	function getSal(p_empno emp.empno%type) return number as
	          v_sal emp.sal%type;
	begin
	          select sal into v_sal from emp where empno=p_empno;
	          dbms_output.put_line('Proc salary= '||v_sal);
	          return v_sal;
	exception
	          when no_data_found then
	          dbms_output.put_line('Invalid emp no');
	end;

end;
/

execute emp_pack.getEmpInfo(7788);

declare
v_forsal emp.sal%type;
begin
v_forsal:=emp_pack.getSal(7788);
dbms_output.put_line('7788 salary= '||v_forsal);
end;
/

***************************************************************************
Global n Private Variables-------
================================
create or replace package emp_pack as
	g_var number:=100;
	procedure getEmpInfo(p_empno emp.empno%type);
	function getSal(p_empno emp.empno%type) return number;
end;
/
create or replace package body emp_pack as

	pri_var number:=11;
	procedure pri_proc as
	begin
	          dbms_output.put_line('in private proc pri_proc');
	end;

	procedure getEmpInfo(p_empno emp.empno%type) as
	          v_name emp.ename%type;
	begin
	          select ename into v_name from emp where empno=p_empno;
	          dbms_output.put_line('Proc ename= '||v_name);
	exception
	          when no_data_found then
	          dbms_output.put_line('Invalid emp no');
	end;

	function getSal(p_empno emp.empno%type) return number as
	          v_sal emp.sal%type;
	begin
	          select sal into v_sal from emp where empno=p_empno;
	          dbms_output.put_line('Proc salary= '||v_sal);
	          return v_sal;
	exception
	          when no_data_found then
	          dbms_output.put_line('Invalid emp no');
	end;

end;
/

execute emp_pack.getEmpInfo(7788);

declare
v_forsal emp.sal%type;
begin
v_forsal:=emp_pack.getSal(7788);
dbms_output.put_line('7788 salary= '||v_forsal);
dbms_output.put_line('global var= '||emp_pack.g_var);
end;
/

declare
v_forsal emp.sal%type;
begin
v_forsal:=emp_pack.getSal(7788);
dbms_output.put_line('7788 salary= '||v_forsal);
dbms_output.put_line('private var= '||emp_pack.pri_var);
end;
/
***************************************************************************
Initialization Block------
=========================
create or replace package emp_pack as
	g_var number:=100;
	procedure getEmpInfo(p_empno emp.empno%type);
	function getSal(p_empno emp.empno%type) return number;
end;
/
create or replace package body emp_pack as

	procedure pri_proc as
	begin
	          dbms_output.put_line('in private proc pri_proc');
	end;

	procedure getEmpInfo(p_empno emp.empno%type) as
	          v_name emp.ename%type;
	begin
	          select ename into v_name from emp where empno=p_empno;
	          dbms_output.put_line('Proc ename= '||v_name);
	exception
	          when no_data_found then
	          dbms_output.put_line('Invalid emp no');
	end;

	function getSal(p_empno emp.empno%type) return number as
	          v_sal emp.sal%type;
	begin
	          select sal into v_sal from emp where empno=p_empno;
	          dbms_output.put_line('Proc salary= '||v_sal);
	          return v_sal;
	exception
	          when no_data_found then
	          dbms_output.put_line('Invalid emp no');
	end;

	begin
	dbms_output.put_line('Initialization');
	g_var:=1;

end;
/
execute emp_pack.getEmpInfo(7788);

declare
v_forsal emp.sal%type;
begin
v_forsal:=emp_pack.getSal(7788);
dbms_output.put_line('7788 salary= '||v_forsal);
dbms_output.put_line('global var= '||emp_pack.g_var);
end;
/

***************************************************************************
Function Overloading----
====================

create or replace package operations as
	function add(var1 number, var2 number) return number ;
	function add(var1 number, var2 number, var3 number) return number ;
end;
/
create or replace package body operations as

	function add(var1 number, var2 number) return number as
	result number;
	begin
	result:=var1+var2;
	dbms_output.put_line('Adding 2 values = '||result);
	return result;
	end;

	function add(var1 number, var2 number, var3 number) return number as
	result number;
	begin
	result:=var1+var2+var3;
	dbms_output.put_line('Adding 3 values = '||result);
	return result;
	end;
end;
/

declare
res number;
begin
res:=operations.add(10,20);
dbms_output.put_line('2 Parameters Addition= '||res);
res:=operations.add(100,200,300);
dbms_output.put_line('3 Parameters Addition= '||res);
end;
/
***************************************************************************
































==========================================================
***************ASSIGNMENTS************
==========================================================
Practice 1

•	Create a package named MANAGE_EMP_PACK that has two public procedures, two package level variables and a private function. The public procedure HIRE_EMP adds an employee record in EMPLOYEES table and the public procedure FIRE_EMP deletes an employee record from the EMPLOYEES table. The two variables v_insert_cnt and v_delete_cnt are used in the package, for keeping record of the numbers of times insert / delete has been executed. 
Create a private function VALIDATE_EMP in the package to validate employee number. This function can be called from HIRE_EMP and FIRE_EMP.
•	The function VALIDATE_EMP accepts an employee number in a parameter p_eno and returns TRUE if the value of employee number exists in the EMPLOYEES table else it returns FALSE.
•	The procedure HIRE_EMP takes all the column values of the EMPLOYEES table as parameters. It gives a call to VALIDATE_EMP by passing on the value of employee number and if the function returns TRUE then it displays message ‘Employee number already in use’. If the function returns FALSE then it inserts a new record in the EMPLOYEES table and displays a message ‘One employee added’. It also increments the value of v_insert_cnt by 1.
•	The procedure FIRE_EMP accepts an employee number as a parameter and gives a call to VALIDATE_EMP by passing on the value of employee number. If the function returns TRUE then it deletes the corresponding record from the EMPLOYEES table, displays message ‘One employee deleted’ and increments the value of v_delete_cnt by 1. If the function returns FALSE then it displays message ‘Wrong employee number’.
•	Check working of the methods in MANAGE_EMP_PACK by giving calls to the public procedures and by displaying value of the appropriate package variable, through an anonymous block 
=================>>>>>>>>

create or replace package MANAGE_EMP_PACK as
	
	procedure HIRE_EMP(empno emp.empno%type , ename emp.ename%type, job emp.job%type , mgr emp.mgr%type , hiredate emp.hiredate%type , sal emp.sal%type , comm emp.comm%type , deptno emp.deptno%type);
	procedure FIRE_EMP(empno emp.empno%type) ;
end;
/
create or replace package body emp_pack as

	function VALIDATE_EMP  

	procedure HIRE_EMP(empno emp.empno%type , ename emp.ename%type, job emp.job%type , mgr emp.mgr%type , hiredate emp.hiredate%type , sal emp.sal%type , comm emp.comm%type , deptno emp.deptno%type) as
	         
	begin
	          insert into emp values(empno,ename,job,mgr,hiredate,sal,comm,deptno);
	          dbms_output.put_line('Proc ename= '||v_name);
	end;

	procedure FIRE_EMP(p_empno emp.empno%type) return number as
	     
	begin
	         
	end;

	

end;
/
********************************************************************************
Practice 2

•	Create a package named MY_EMP_PACK having two overloaded functions named GET_AVG_SAL. The first function accepts first name as a parameter while the second function accepts employee_id as a parameter and both return the average salary paid in the department to which the employee belongs.  Both the functions should handle the exception for non-existing employee by displaying an appropriate error message.
•	Give a call to GET_AVG_SAL through an anonymous PL/SQL block by passing on employee number 7900. Do the same again by passing on employee name ‘King’.

create or replace package MY_EMP_PACK as
	function GET_AVG_SAL(p_empno emp.empno%type ) return number;
	function GET_AVG_SAL(p_ename emp.ename%type ) return number;
end;
/

create or replace package body MY_EMP_PACK as
	function GET_AVG_SAL(p_empno emp.empno%type ) return number as
	p_sal emp.sal%type;
	begin
	select avg(sal) into p_sal from emp group by deptno having deptno=(select deptno from emp where empno=p_empno);
	return p_sal;
	exception
	when no_data_found then
	dbms_output.put_line('Employee id does not exist.');
	end;

	function GET_AVG_SAL(p_ename emp.ename%type ) return number as
	p_sal emp.sal%type;
	begin
	select avg(sal) into p_sal from emp group by deptno having deptno=(select deptno from emp where ename=p_ename);
	return p_sal;
	exception
	when no_data_found then
	dbms_output.put_line('Employee name does not exist.');
	end;
	
end;
/


declare
v_Sal emp.sal%type;
begin
v_Sal:=MY_EMP_PACK.GET_AVG_SAL(7900);
dbms_output.put_line('Salary:  '||v_Sal);
v_Sal:=MY_EMP_PACK.GET_AVG_SAL('KING');
dbms_output.put_line('Salary:  '||v_Sal);
end;
/

***********************************************************************************************

Practice 3

Create a package containing a private function Find_Plan and a public procedure Display_Plans as described below:

a)	The function Find_Plan will find out and return the plan id which is used by maximum customer.					
b)	The procedure Display_Plan will call Find_Plan function and will display the Plan name and the corresponding service name.
c)	Call the above procedure from anonymous PL/SQL block. 
The  sample report is shown below :

Plan ID :_______________ Plan_Name:_____________
Service_name:_________
Note: refer Operator_schema schema
==========>>

create or replace package Planning as
	procedure Display_Plans;
end;
/

create or replace package body Planning as

	function Find_Plan return number as
	planid customers.plan_id%type;
	begin
	select plan_id into planid from customers group by plan_id having count(*)=(select max(count(*)) from customers group by plan_id ); 
	return planid;
	end;
	
	procedure Display_Plans as
	planid number;
	planname plans.plan_name%type;
	servicename services.service_name%type;
	begin
	planid:=Find_Plan;
	select plan_name , service_name into planname, servicename from plans p, services s where plan_id=planid and p.service_id=s.service_id;
	dbms_output.put_line('Plan Name= '||planname||'    service name= '||servicename);
	end;
end;
/

begin
	Planning.Display_Plans;
end;
/

***********************************************************************************************
Practice 4
Create a Package pkgDisplay_details which has a public function and a public procedure as given below :					

1)	Public function fnDisplayStatus which accepts paper id as parameter 
and returns the status of  paper. If an invalid paper is passed then it returns invalid 
2)	Public procedure prDispCount which accepts author id and status 
as parameter. The procedure displays the no of papers by the author with the given status.
Hint : prDispCount('A001','Published') will display the count as 2.

Invoke the above function and procedure from the anonymous block and display the values returned by the function.

Note: refer scholar_domain_publication schema
===========>>

create or replace package pkgDisplay_details as
	function fnDisplayStatus(paperid  publications.paper_id%type) return publications.status%type ;
	procedure prDispCount(authorid  publications.PRI_AUTHR_ID%type, p_st publications.status%type) ;

end;
/

create or replace package body pkgDisplay_details as
	function fnDisplayStatus(paperid  publications.paper_id%type) return publications.status%type as
	p_status publications.status%type;
	begin
	select status into p_status from publications where paper_id=paperid;
	return p_status;
	exception
	when no_data_found then
	dbms_output.put_line('Invalid Paperid');
	end;

	procedure prDispCount(authorid  publications.PRI_AUTHR_ID%type,p_st publications.status%type) as
	ct number;
	begin
	select count(*) into ct from publications where pri_authr_id=authorid and status=p_st;
	dbms_output.put_line('No of papers = '||ct);
	exception
	when no_data_found then
	dbms_output.put_line('Invalid Paperid');
	end;

end;
/

declare
p_status publications.status%type;
begin
p_status:=pkgDisplay_details.fnDisplayStatus('P001');
dbms_output.put_line('Status = '||p_status);
pkgDisplay_details.prDispCount('A001','Published');
end;
/
***********************************************************************************************

















