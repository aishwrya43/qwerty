Exception
***************
***************


program1
**************************************************************************************************************

   declare
	v_sal emp.sal%type;
    	var number(3);
	z number;
   begin
	var:=10000;
	z:=10/0;
	select sal into v_sal from emp where empno=1;
	dbms_output.put_line('sal= '||v_sal);	
   exception
	when no_data_found  then
	              dbms_output.put_line('Emp no is not availabe ');
	when zero_divide then
	              dbms_output.put_line('Dont try to devide by zero');
	when value_error then
	              dbms_output.put_line('Value error');
	when others then
	              dbms_output.put_line('Exception raised');
   end;
   /

program2
*************************************************************************************************************

   begin
	declare
		v_sal emp.sal%type;
    		var number(3):=10000;
		z number;
   	begin
		select sal into z from emp;
		var:=10000;
		z:=10/0;
		select sal into v_sal from emp where empno=1;
		dbms_output.put_line('sal= '||v_sal);	
   
   	end;	
   exception
	when no_data_found  then
	              dbms_output.put_line('Emp no is not availabe ');
	when zero_divide then
	              dbms_output.put_line('Dont try to devide by zero');
	when value_error then
	              dbms_output.put_line('Value error');
	when to_many_rows then
	              dbms_output.put_line('Multiple rows fetched');
	when others then
	              dbms_output.put_line('Exception raised');
   end;
   /

program3
*************************************************************************************************************

  declare
	var number(3);
	z number;
   begin
	begin
		var:=10000;
		dbms_output.put_line('var= '||var);
	exception
		when value_error then
	              		dbms_output.put_line('Value error');
	end;
	z:=10/0;
	dbms_output.put_line('after z');		
   exception
	when no_data_found  then
	              dbms_output.put_line('Emp no is not availabe ');
	when zero_divide then
	              dbms_output.put_line('Dont try to devide by zero');	
	when others then
	              dbms_output.put_line('Exception raised');
   end;
   /

program4
*************************************************************************************************************

    declare
	childfound exception;
	pragma exception_init(childfound,-02292);
    begin
	delete dept where deptno=10;
	dbms_output.put_line('dept 10 is deleted');
    exception
	when childfound then
	    dbms_output.put_line('emp existing in dept 10');
    end;
    /

program5
*************************************************************************************************************

    declare
	marks number;
	wrong_marks exception;
    begin
	marks:=&marks;
	if marks>100 then
	      raise wrong_marks;
	end if;
	dbms_output.put_line('ur marls= '||marks);
    exception
	when wrong_marks then
	     dbms_output.put_line('Please enter valid marks which is <=100');
    end;
    /

program6
*************************************************************************************************************

     declare
	v_sal emp.sal%type;
	empid number:=&empid;
	amount number:=&amount;
	less_amount exception;
     begin
	select sal into v_sal from emp where empno=empid;
	if amount > v_sal then
	     raise less_amount;
	end if;
	dbms_output.put_line('Amount fetched');
     exception
	when less_amount then
  	      dbms_output.put_line('Please enter valid amount which is less then '||v_sal);
     end;
     /

program7
*************************************************************************************************************

    declare
	var number(3);
    begin
	var :=10000;
	dbms_output.put_line('var= '||var);
    exception
	when value_error then
	dbms_output.put_line('error code= '||SQLCODE||' message= '||SQLERRM);
    end;
     /

















































====================================================================================
******************ASSIGNMENT***********************
====================================================================================
Practice 1

1)   Create a table named MESSAGES (err_message VARCHAR2(250))
2)   Write a PL/SQL block that accepts a salary value from a user and displays name of the employee               having the salary value, on the screen. 
3)   If the salary entered returns more than one row, handle the exception with an appropriate Exception          handler and insert into the MESSAGES table the message
      “ More than one employee with salary of <input salary>”
4)   If the salary entered does not return any  rows, handle the exception with an appropriate Exception        handler and insert into the MESSAGES table the message
       “ No employee with salary of < input salary>”
5)   If the salary entered returns only one row, insert into the MESSAGES table the employees name 
6)   Handle any other exception with an appropriate Exception handler and insert into the MESSAGES        table the message “ Some other error occurred”

======>

1)    create table messages(err_message varchar2(250));
2)  
	declare
	     esal emp.sal%type:=&esal;
	     name emp.ename%type;
	begin
	     select ename into name from emp where sal=esal;
	     dbms_output.put_line('name of salary '||esal||' is '||name);
	end;
	/

3)
	declare
	     esal emp.sal%type:=&esal;
	     name emp.ename%type;
	begin
	     select ename into name from emp where sal=esal;
	     dbms_output.put_line('name of salary '||esal||' is '||name);
	exception
	     when too_many_rows then
	     insert into messages values('More than one employee with salary of '||esal);
	end;
	/




4)
	declare
	     esal emp.sal%type:=&esal;
	     name emp.ename%type;
	begin
	     select ename into name from emp where sal=esal;
	     dbms_output.put_line('name of salary '||esal||' is '||name);
	exception
	     when too_many_rows then
	     insert into messages values('More than one employee with salary of '||esal);
	     when no_data_found then
	     insert into messages values('No employee with salary of '||esal);
	end;
	/

5)
	declare
	     esal emp.sal%type:=&esal;
	     name emp.ename%type;
	begin
	     select ename into name from emp where sal=esal;
	      insert into messages values('name of salary '||esal||' is '||name);
	     dbms_output.put_line('name of employee having salary '||esal||' is '||name);
	exception
	     when too_many_rows then
	     insert into messages values('More than one employee with salary of '||esal);
	     when no_data_found then
	     insert into messages values('No employee with salary of '||esal);
	end;
	/

6)
	declare
	     esal emp.sal%type:=&esal;
	     name emp.ename%type;
	begin
	     select ename into name from emp where sal=esal;
	      insert into messages values('name of salary '||esal||' is '||name);
	     dbms_output.put_line('name of employee having salary '||esal||' is '||name);
	exception
	     when too_many_rows then
	     insert into messages values('More than one employee with salary of '||esal);
	     when no_data_found then
	     insert into messages values('No employee with salary of '||esal);
	     when others then
	     insert into messages values('Some other error occurred');
	end;
	/	
**********************************************************************************************************************
Practice 2

•	Write a PL/SQL block that accepts all the column values for departments table as user inputs and inserts a record in the departments table. The block should give a name DUPLICATE_DEPT to the error for duplicate value of the primary key, department_id. (Use pragma EXCEPTION_INIT) The block should write a handler for handling the exception fired when a duplicated value is entered for department_id. The handler should have code for displaying an appropriate message on the screen when DUPLICATE_DEPT is fired.

======>>>>

	declare
	        v_deptno dept.deptno%type:=&deptnum;
	        v_dname dept.dname%type:='&deptname';
	        v_loc dept.loc%type:='&location';
	        DUPLICATE_DEPT exception;
	        pragma exception_init(DUPLICATE_DEPT,-00001);
	begin
	         insert into dept values(v_deptno,v_dname,v_loc);
	exception
	         when DUPLICATE_DEPT then
		dbms_output.put_line('Duplicate Dept number found');	      
	end;
	/
**********************************************************************************************************************
Practice 3

•	Write a PL/SQL BLOCK to check for more than one President Job in the “employees” table. Create a user defined exception named DUPLICATE_PRESIDENT that should be raised when more than one President is found in the “employees” table. The block should handle the exception by displaying a message “MORE THAN ONE PRESIDENT” on the screen.

=======>>>>>

	declare
	     name emp.ename%type;
	     DUPLICATE_PRESIDENT exception;
	     pragma exception_init(DUPLICATE_PRESIDENT ,-01422);
	begin
	     select ename into name from emp where job='PRESIDENT';
	exception
	     when DUPLICATE_PRESIDENT then
	     dbms_output.put_line('MORE THAN ONE PRESIDENT');
	end;
	/
**********************************************************************************************************************
Practice 4
•	Write a PL/SQL block that accepts the employee_id of two employees as two user inputs empno1 and empno2. If empno1 exists in the “employees” table, then the block increases the salary of the employee by 10%. If empno2 exists in the “employees” table then the block increases his salary by 20%. The block should raise and handle the errors if empno1 or empno2 or both do not exist, by displaying the appropriate messages. Note that if empno1 does not exist but empno2 exists then the salary of empno2 must be increased. Also when both empno1 and empno2 do not exist then the error must be handled by the block.
=======>>>>

	declare
	    empno1 number:=&empno1;
	    empno2 number:=&empno2;
	    n1 varchar2(20);
	    n2 varchar2(20);
	    k number:=0;
    	l number:=0;
		AD exception;
	begin		
		    
	    	begin
		     select ename into n1 from emp where empno=empno1;
		     update emp set sal=sal*1.1 where empno=empno1;
		  k:=1;
		exception
		     when no_data_found then

		     dbms_output.put_line('First Employee id '|| empno1||' doesnt exist');
		end;
		
		begin
		     select ename into n2 from emp where empno=empno2;

		     update emp set sal=sal*1.2 where empno=empno2;
		l:=1;
		exception
		     when no_data_found then
		     dbms_output.put_line('Second Employee id  '|| empno2||' doesnt exist');
		end;
		

		if k=0 and l=0 then
	                           raise AD;
		end if;
	exception
	     	when AD then
		dbms_output.put_line('Both Employee ids doesnt exist');
	    
	end;
	/
**********************************************************************************************************************
Practice 5
                            Write a PLSQL block which takes Movie booking details as input from the user and inserts a record in the booking table after doing the following validation
o	Book_id should be unique
o	Want to book for today 
o	Person_booked is the user itself
o	theartre_id, movie_id, show_id should be valid
o	No_of_tickets are 2

Raise a user defined exception for each of the above validations, display appropriate error message and terminate the program




































































